name: Sync Forks

on:
  schedule:
    # Run the action daily at midnight
    - cron: "0 0 * * *"
  workflow_dispatch: # Allow manual triggering of the workflow

jobs:
  sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Fetch all repositories and sync forks
        run: |
          echo "Fetching all repositories..."

          # Initialize an empty variable for REPOS
          REPOS=""

          # Pagination: Start from page 1
          PAGE=1
          PER_PAGE=100

          # Loop through all pages
          while :; do
            # Fetch repositories by page using Personal Access Token
            RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              "https://api.github.com/user/repos?per_page=$PER_PAGE&page=$PAGE")

            # Output the raw response for debugging purposes
            echo "API Response for page $PAGE: $RESPONSE"

            # Check if we have received a response or if it is empty
            if [ "$(echo "$RESPONSE" | jq '. | length')" -eq 0 ]; then
              break
            fi

            # Add repositories from the current page to the REPOS variable
            PAGE_REPOS=$(echo "$RESPONSE" | jq -r '.[] | select(.fork == true) | .name')
            REPOS="$REPOS $PAGE_REPOS"

            # Increment the page number
            PAGE=$((PAGE + 1))
          done

          # Output the final list of repositories
          echo "Repositories to sync: $REPOS"

          # Check if REPOS is empty
          if [ -z "$REPOS" ]; then
            echo "No forked repositories found to sync."
            exit 0
          fi

          # Loop through each repository and perform the sync
          for REPO in $REPOS; do
            # Use -- to prevent issues with repo names starting with '-'
            echo "Syncing fork for repository: $REPO"
            git clone -- "https://github.com/${{ github.repository_owner }}/$REPO.git" || continue
            cd "$REPO" || continue
            UPSTREAM_URL=$(curl -s -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository_owner }}/$REPO" | jq -r '.parent.clone_url')

            # Check if UPSTREAM_URL is valid
            if [ "$UPSTREAM_URL" == "null" ]; then
              echo "No upstream found for $REPO, skipping..."
              cd ..
              continue
            fi

            git remote add upstream "$UPSTREAM_URL" || echo "Upstream already exists for $REPO"
            git fetch upstream
            git merge upstream/main --no-edit
            git push origin main
            cd ..
          done
